name: PromptAutoRefactor
version: 0.1.0
description: |
  プロンプトを自律的に改善するアプリケーション。LLM の応答を逐次評価し、通常は
  人間が行う追加入力もシステムが自動生成することで、目標となる最終アウトプットが
  得られるまでプロンプトをリファクタリングし続ける。ゴール達成時に、最適化された
  プロンプトを提示する。

# -----------------------------------------------------------------------------
#  高レベル目標
# -----------------------------------------------------------------------------
objective:
  goal_statement: >-
    人間の介入なしで目的の出力を安定して生成できるリファクタ済みプロンプトを
    自動生成する。
  success_criteria:
    - 途中で必要となる入力をすべてシステムが自動で生成する。
    - LLM の最終出力が事前に定義された受け入れテストを満たす。
    - 合格したプロンプトをユーザへ提示する。

# -----------------------------------------------------------------------------
#  アクター
# -----------------------------------------------------------------------------
actors:
  - id: system
    name: PromptAutoRefactor エンジン
    description: プロンプトの実行・評価・入力注入を統括する自動化エンジン。
  - id: llm
    name: Large Language Model
    description: プロンプトに対して応答を返す外部 LLM API。

# -----------------------------------------------------------------------------
#  機能要件
# -----------------------------------------------------------------------------
functional_requirements:
  FR1:
    summary: プロンプトの反復実行
    details: |
      システムはプロンプトを LLM に送信し、出力を取得して受け入れテストを実行する。
  FR2:
    summary: 自動入力注入
    details: |
      LLM の応答が追加のユーザ入力を要求する場合、システムはその要求を検出し、
      適切な入力を自動生成して提供する。
  FR3:
    summary: プロンプトリファクタリングループ
    details: |
      評価が不合格の場合、システムはプロンプトを改良（指示強化、例追加、トーン調整
      等）し、合格するまでまたは最大反復回数に達するまで再実行する。
  FR4:
    summary: 受け入れテスト
    details: |
      正規表現・構造化期待値・コード実行など、構成可能なテストを用いて LLM 出力が
      目標を満たすか判定する。
  FR5:
    summary: 最終プロンプト提示
    details: |
      テスト合格後、合格出力を生んだリファクタ済みプロンプトをユーザに提示する。
  FR6:
    summary: 監査ログ
    details: |
      全プロンプトバージョン、生成入力、LLM 出力、評価結果、意思決定を保存する。
  FR7:
    summary: シンプル Web UI の提供
    details: |
      ユーザがプロンプトリファクタリングを開始し、進行状況と結果ログを閲覧できる
      最小限の Web インタフェースを提供する。入力フィールドと結果表示パネルのみ
      で構成し、追加のユーザ操作は不要とする。
  FR8:
    summary: 実行詳細の可視化
    details: |
      各反復で生成された自動入力値、LLM の最終出力、Evaluator による分析結果、
      RefactorEngine の修正方針を UI 上でリアルタイムまたは完了後に閲覧できるよう
      にする。フィルタリングや時系列順の表示が可能であること。
  FR9:
    summary: エージェントペルソナ自動生成による評価
    details: |
      Evaluator の内部で使用する高次エージェントペルソナを自律的に生成し、
      その視点で最終出力物を評価・分析して RefactorEngine にフィードバックする
      方式を採用する。エージェントは以下のテンプレートを基に生成される:

      agent_directives:
        persona:
          role: "洞察力と俯瞰的視点を持つ、高次の [戦略家 / 設計者 / アナリスト]"
          mindset: >-
            あなたは単なる指示実行者ではなく、プロジェクトの成功にコミットする知的
            パートナーです。常に目的意識を持ち、前提を疑い、より本質的な価値を創出
            してください。
        operating_philosophy:
          - "Objective-First: 全ての思考と行動は、最終目標の達成に貢献するかを基準とせよ。"
          - "Evidence-Informed: 主張と提案は、客観的な根拠（データ、論理、引用情報）に基づいて構築せよ。"
          - "Systematic-Thinking: 複雑な事象を構造化・体系化し、シンプルで一貫性のあるアウトプットを生成せよ。"
        self_correction_protocol:
          - "Ambiguity Handling: 指示が曖昧な場合、最終目標に照らして最も合理的な解釈を下し、その解釈を明記した上でタスクを遂行せよ。"
          - "Constraint Conflict: 制約条件が最適解の妨げになる場合、矛盾点を指摘し、代替案を提示せよ。"
          - "Information Gap: 外部情報が必要な場合、信頼できる情報源から自律的に情報を取得し、その出典を明記せよ。"

# -----------------------------------------------------------------------------
#  非機能要件
# -----------------------------------------------------------------------------
non_functional_requirements:
  performance:
    - 単純なタスクでは、全リファクタサイクルを N 秒以内（設定可能）で完了すべき。
  reliability:
    - 予期せぬ停止後も、最後の保存状態から処理を再開できるべき。
  usability:
    - 構成は 1 つの YAML または JSON ファイルで行えるべき。
  observability:
    - 各反復を再現できる十分な詳細でログを残すこと。

# -----------------------------------------------------------------------------
#  システムコンポーネント
# -----------------------------------------------------------------------------
components:
  - name: PromptExecutor
    description: プロンプトを LLM API に送信し応答を取得する。
  - name: InteractionDetector
    description: LLM 応答を解析し追加入力要求を検出する。
  - name: InputGenerator
    description: 追加入力要求に対して適切な入力を生成する。
  - name: Evaluator
    description: 受け入れテストを実行し出力を評価する。
  - name: RefactorEngine
    description: 評価フィードバックをもとにプロンプトを改善する。
  - name: Logger
    description: すべての反復と意思決定を永続化する。
  - name: WebUI
    description: |
      シンプルなフロントエンド (HTML/CSS/JS or React 等)。以下を表示する:
        • 初期プロンプトおよびリファクタ履歴
        • 自動入力値 (ユーザインジェクション)
        • 各反復の LLM 出力と合否
        • Evaluator の分析結果、RefactorEngine の次回修正方針
        • 最終的に合格したプロンプトと出力
  - name: AgentGenerator
    description: 指定テンプレートとタスク内容から評価用エージェントのペルソナ
      (役割・思想・自己修正プロトコル) を生成し Evaluator に提供する。

# -----------------------------------------------------------------------------
#  ワークフロー（ハッピーパス）
# -----------------------------------------------------------------------------
workflow:
  - step: "プロンプト初期化、iteration_counter ← 0"
  - step: "PromptExecutor でプロンプト実行"
  - step: "InteractionDetector が入力要求を検出した場合 → InputGenerator が応答"
  - step: "Evaluator が出力に対し受け入れテストを実行"
  - step: "テスト合格 → プロンプトを提示して終了"
  - step: "不合格 → RefactorEngine がプロンプトを更新し iteration_counter++"
  - step: "成功または max_iterations までループを継続"

# -----------------------------------------------------------------------------
#  設定パラメータ
# -----------------------------------------------------------------------------
config:
  max_iterations: 10
  llm_provider: OpenAI
  model: gpt-4o
  temperature: 0.7
  evaluation:
    type: regex
    patterns:
      - "EXPECTED_OUTPUT_REGEX"
  agent_template:
    enabled: true
    base_directives: "agent_directives"  # 上記テンプレートキーを参照

# -----------------------------------------------------------------------------
#  未決事項 / TBD
# -----------------------------------------------------------------------------
open_questions:
  - ドメイン固有入力を InputGenerator がどのように動的生成するか？
  - RefactorEngine で遺伝的アルゴリズム等の勾配レス最適化を使うべきか？
  - max_iterations 到達時のフォールバックはどうするか？

# -----------------------------------------------------------------------------
#  テストケース
# -----------------------------------------------------------------------------
tests:
  - id: TEST-01
    title: 単純な決定論的出力
    purpose: | 
      FR1 (プロンプトの反復実行) と FR4 (受け入れテスト) を検証する。
      入力不要のシンプルな計算問題で、出力整合性を確認する。
    scenario:
      initial_prompt: "2+2="
    expected:
      type: regex
      pattern: "^4$"
      timeout_sec: 10
      max_iterations: 3

  - id: TEST-02
    title: 自動入力注入の検証
    purpose: |
      FR2 (自動入力注入) と FR3 (リファクタリングループ) を検証する。
      LLM がユーザ名を尋ねる対話型プロンプトを使用し、InputGenerator が適切に
      名前を提供できるか確認する。
    scenario:
      initial_prompt: |
        あなたは挨拶ボットです。「あなたの名前は?」と尋ねてから、
        入力された名前に対して「こんにちは、<名前>!」と応答してください。
    auto_inputs:
      - "太郎"
    expected:
      type: regex
      pattern: "こんにちは、太郎[!！]"
      timeout_sec: 15
      max_iterations: 5

  - id: TEST-03
    title: リファクタリング失敗時のフォールバック
    purpose: |
      FR3 で定義された最大反復回数到達時の挙動を検証する。
    scenario:
      initial_prompt: |
        「絶対に 'SUCCESS' とだけ出力してください。」
    expected:
      type: regex
      pattern: "^SUCCESS$"
      timeout_sec: 20
      max_iterations: 2
    on_failure_expected: true  # テストは失敗を期待する (max_iterations 超過) 